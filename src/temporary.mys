from . import cd
from . import cwd
from . import getenv
from . import OsError
from .path import Path

c"""source-before-namespace
#include <unistd.h>
"""

def _create_template() -> bytes:
    tmpdir = getenv("TMPDIR", "/tmp").strip_right("/")
    name = f"{tmpdir}/tmp.XXXXXX".to_utf8()
    name += 0

    return name

class File:
    """A temporary file.

    """

    _path: Path
    _remove: bool

    def __init__(self, remove: bool = True):
        self._path = None
        self._remove = remove
        name = _create_template()

        c"""
        int fd = mkstemp((char *)name.m_bytes->data());

        if (fd != -1) {
            close(fd);
            name.m_bytes->pop_back();
            this->_path = mys::make_shared<path::Path>(String(name));
        }
        """

        if self._path is None:
            raise OsError("Failed to create temporary file.")

    def __del__(self):
        self._del()

    def _del(self):
        if self._remove:
            self._path.rm(force=True)

    def path(self) -> Path:
        """The file system path to the file.

        """

        return self._path

class Directory:
    """A temporary directory.

    """

    _path: Path
    _remove: bool

    def __init__(self, remove: bool = True):
        self._path = None
        self._remove = remove
        name = _create_template()

        c"""
        if (mkdtemp((char *)name.m_bytes->data()) != NULL) {
            name.m_bytes->pop_back();
            this->_path = mys::make_shared<path::Path>(String(name));
        }
        """

        if self._path is None:
            raise OsError("Failed to create temporary directory.")

    def __del__(self):
        self._del()

    def _del(self):
        if self._remove:
            self._path.rm(force=True, recursive=True)

    def path(self) -> Path:
        """The file system path to the directory.

        """

        return self._path

@test
def test_file():
    tmpfile = File()
    assert tmpfile.path().exists()

def _create_files() -> (Path, Path):
    return (File().path(), File(remove=False).path())

@test
def test_file_remove():
    path_remove_true, path_remove_false = _create_files()
    assert not path_remove_true.exists()
    assert path_remove_false.exists()
    path_remove_false.rm()

@test
def test_directory():
    tmpdir = Directory()
    assert tmpdir.path().exists()

def _create_directories() -> (Path, Path):
    return (Directory().path(), Directory(remove=False).path())

@test
def test_directory_remove():
    path_remove_true, path_remove_false = _create_directories()
    assert not path_remove_true.exists()
    assert path_remove_false.exists()
    path_remove_false.rm()

@test
def test_remove_directory():
    tmpdir = Directory()
    original_path = cwd()
    cd(tmpdir.path())
    Path("foo.txt").touch()
    cd(original_path)
