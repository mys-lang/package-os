from fiber import Fiber
from fiber import current
from fiber import suspend
from .subprocess import run
from .utils import to_utf8
from .path import Path

c"""source-before-namespace
#include <fstream>
#include <filesystem>
#include <cstdlib>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>

extern char **environ;

static inline void setenv_wrapper(const char *name_p, const char *value_p)
{
    setenv(name_p, value_p, 1);
}

static inline void unsetenv_wrapper(const char *name_p)
{
    unsetenv(name_p);
}
"""

class Stdin:

    def get(self) -> i32:
        """Returns the next byte from standard input (stdin), or -1 if end of
        input is reached.

        """

        value: i32 = 0

        c"""
        value = getchar();

        if (value == EOF) {
            value = -1;
        }
        """

        return value

class Stdout:

    def put(self, value: u8):
        """Writes given byte to standard output (stdout).

        """

        c"putchar(value);"

    def write(self, data: bytes):
        """Writes given bytes to standard output (stdout).

        """

        c"fwrite(data.m_bytes->data(), 1, data.m_bytes->size(), stdout);"

    def write(self, data: bytes, offset: i64, count: i64):
        """Writes given bytes to standard output (stdout).

        """

        length = i64(len(data))
        offset = min(offset, length)
        count = min(count, length - offset)

        if count > 0:
            c"fwrite(&data.m_bytes->data()[offset], 1, count, stdout);"

    def flush(self):
        """Flush output buffer.

        """

        c"fflush(stdout);"

STDIN: Stdin = Stdin()
STDOUT: Stdout = Stdout()

_ENV: {string: string} = _load_env()

def _load_env() -> {string: string}:
    variables = {}
    line: string = None

    c"""
    char **envvar = environ;

    while (*envvar != NULL) {
        line = String(*envvar);
    """

    name, separator, value = line.partition("=")

    if separator == "=":
        variables[name] = value

    c"""
        envvar++;
    }
    """

    return variables

class OsError(Error):
    message: string

c"""
static void read_data(BinaryFile *binary_file_p);

static void on_open_complete(uv_fs_t *request_p)
{
    BinaryFile *binary_file_p = (BinaryFile *)(request_p->data);

    uv_fs_req_cleanup(request_p);
    binary_file_p->m_file = request_p->result;
    resume(binary_file_p->_fiber);
}

static void on_read_complete(uv_fs_t *request_p)
{
    BinaryFile *binary_file_p = (BinaryFile *)(request_p->data);

    uv_fs_req_cleanup(request_p);

    if (request_p->result < 0) {
        fprintf(stderr, "error: %s\n", uv_strerror(request_p->result));
    } else if (request_p->result == 0) {
        resume(binary_file_p->_fiber);
    } else {
        for (int i = 0; i < request_p->result; i++) {
            binary_file_p->_data += binary_file_p->m_data[i];
        }

        read_data(binary_file_p);
    }
}

static void read_data(BinaryFile *binary_file_p)
{
    uv_fs_read(uv_default_loop(),
               &binary_file_p->m_request,
               binary_file_p->m_file,
               &binary_file_p->m_buf,
               1,
               -1,
               on_read_complete);
}

static void on_write_complete(uv_fs_t *request_p)
{
    BinaryFile *binary_file_p = (BinaryFile *)(request_p->data);

    uv_fs_req_cleanup(request_p);
    resume(binary_file_p->_fiber);
}
"""

class BinaryFile:
    """A binary file.

    """

    c"uv_fs_t m_request;"
    c"uv_buf_t m_buf;"
    c"char m_data[256];"
    c"uv_file m_file;"
    _data: bytes
    _fiber: Fiber

    def __init__(self, path: string, mode: string = "r"):
        """Opens given file. Mode can be `r` or `w`.

        """

        path_utf8 = to_utf8(path)
        self._fiber = current()

        c"""
        m_request.data = this;
        int flags;

        if (mode == String("r")) {
            flags = O_RDONLY;
        } else if (mode == String("w")) {
            flags = O_WRONLY | O_CREAT | O_TRUNC;
        } else {
            flags = 0;
        }

        uv_fs_open(uv_default_loop(),
                   &m_request,
                   (const char *)path_utf8.m_bytes->data(),
                   flags,
                   0664,
                   on_open_complete);
        """

        suspend()
        message: string = None

        c"""
        if (m_file < 0) {
            message = String(uv_strerror(m_file));
        }
        """

        if message is not None:
            raise OsError(f"failed to open '{path}': {message}")

        self._fiber = None

    def __del__(self):
        self.close()

    def close(self):
        """Close the file. The file is closed automatically in the destructor
        if not already closed.

        """

        c"""
        if (m_file != -1) {
            uv_fs_close(uv_default_loop(), &m_request, m_file, NULL);
            m_file = -1;
        }
        """

    def read(self) -> bytes:
        """Read from the file.

        """

        if self._fiber is not None:
            raise OsError("Only one fiber can use the file.")

        self._fiber = current()
        self._data = b""

        c"""
        m_buf = uv_buf_init(m_data, sizeof(m_data));
        uv_fs_read(uv_default_loop(),
                   &m_request,
                   m_file,
                   &m_buf,
                   1,
                   -1,
                   on_read_complete);
        """

        suspend()
        self._fiber = None

        return self._data

    def write(self, data: bytes):
        """Write to the file.

        """

        if self._fiber is not None:
            raise OsError("Only one fiber can use the file.")

        self._fiber = current()

        c"""
        m_buf = uv_buf_init((char *)data.m_bytes->data(),
                            data.m_bytes->size());
        uv_fs_write(uv_default_loop(),
                    &m_request,
                    m_file,
                    &m_buf,
                    1,
                    -1,
                    on_write_complete);
        """

        suspend()
        self._fiber = None

class TextFile:
    """A text file.

    """

    _binary_file: BinaryFile

    def __init__(self, path: string, mode: string = "r"):
        """Opens given file. Mode can be `r` or `w`.

        """

        self._binary_file = BinaryFile(path, mode)

    def close(self):
        """Close the file. The file is closed automatically in the destructor
        if not already closed.

        """

        self._binary_file.close()

    def read(self) -> string:
        """Read from the file.

        """

        return string(self._binary_file.read())

    def write(self, data: string):
        """Write to the file.

        """

        self._binary_file.write(data.to_utf8())

def which(executable: string) -> Path:
    """Locate given executable in the user's path.

    """

    for path in getenv("PATH").split(":"):
        full_path = Path(path).join(executable)

        if full_path.exists():
            return full_path

    raise OsError(f"Executable '{executable}' not found.")

def cwd() -> Path:
    path: Path = None

    c"""
    path = mys::make_shared<path::Path>(String(std::filesystem::current_path()));
    """

    return path

def env() -> {string: string}:
    """Returns all environment variables.

    """

    return _ENV

def getenv(name: string) -> string:
    """Get given environment variable.

    """

    if name not in _ENV:
        raise OsError(f"environment variable '{name}' is not set")

    return getenv(name, None)

def getenv(name: string, default: string) -> string:
    """Get given environment variable. Returns given default value if the
    environment variable is not set.

    """

    return _ENV.get(name, default)

def setenv(name: string, value: string):
    """Set given environment variable.

    """

    name_utf8 = to_utf8(name)
    value_utf8 = to_utf8(value)

    c"""
    setenv_wrapper((const char *)name_utf8.m_bytes->data(),
                   (const char *)value_utf8.m_bytes->data());
    """

    _ENV[name] = value

def unsetenv(name: string):
    """Unset given environment variable.

    """

    name_utf8 = to_utf8(name)

    c"""
    unsetenv_wrapper((const char *)name_utf8.m_bytes->data());
    """

    _ENV.pop(name, None)

def tar(archive: Path,
        extract: bool = False,
        create: bool = False,
        strip_components: i64 = 0,
        output_directory: Path = None,
        path: Path = None):
    if extract:
        if path is None:
            path = Path("")

        if output_directory is None:
            output_directory_option = ""
        else:
            output_directory_option = f"-C {output_directory}"

        run(f"tar --strip-components={strip_components} -x -f {archive} "
            f"{output_directory_option} {path}")
    elif create:
        run(f"tar czf {archive} {path}")
    else:
        raise OsError("No tar operation given.")

def nproc(all: bool = False, ignore: i64 = 0) -> i64:
    """Get the number of processing units available.

    """

    count = 0

    if all:
        c"count = sysconf(_SC_NPROCESSORS_CONF);"
    else:
        c"count = sysconf(_SC_NPROCESSORS_ONLN);"

    if count == -1:
        raise OsError("Failed to get number of processing units.")

    count -= ignore

    return max(1, count)

@test
def test_nproc():
    assert nproc() > 0
    assert nproc(all=True) >= nproc()
    assert nproc(ignore=1) in [1, nproc() - 1]
    assert nproc(ignore=nproc()) == 1

@test
def test_env_get_pwd():
    assert getenv("PWD") is not None

@test
def test_env_get_set_unset():
    try:
        message = ""
        getenv("FOOBAR")
    except OsError as e:
        message = e.message

    assert message == "environment variable 'FOOBAR' is not set"
    assert getenv("FOOBAR", "apple") == "apple"

    setenv("FOOBAR", "banan")
    assert getenv("FOOBAR") == "banan"

    unsetenv("FOOBAR")
    assert getenv("FOOBAR", None) is None

@test
def test_all():
    assert env() is not None
    assert "PWD" in env()

@test
def test_cwd():
    directory = Path("cmd")
    directory.mkdir(exists_ok=True)
    directory.cd()
    assert cwd().name() == directory.name()
    Path("..").cd()
    directory.rm()

@test
def test_which():
    try:
        which("mys-xyz123")
        assert False
    except OsError:
        pass

    assert which("ls") is not None

@test
def test_binary_file():
    bf = BinaryFile("README.rst")
    data = bf.read()
    assert len(data) > 0
    bf.close()

@test
def test_binary_file_not_found():
    filename = Path("test_binary_file_not_found.bin")
    filename.rm(force=True)

    try:
        ok = False
        BinaryFile(str(filename))
    except OsError as e:
        ok = True

    assert ok

    filename.rm(force=True)

@test
def test_create_binary_file():
    filename = Path("test_create_binary_file.bin")
    filename.rm(force=True)

    bf = BinaryFile(str(filename), "w")
    bf.close()

    bf = BinaryFile(str(filename))
    assert bf.read() == b""

    filename.rm(force=True)

@test
def test_write_binary_file():
    filename = Path("test_write_binary_file.bin")
    filename.rm(force=True)

    bf = BinaryFile(str(filename), "w")
    bf.write(b"123")
    bf.close()

    bf = BinaryFile(str(filename))
    assert bf.read() == b"123"
    bf.close()

    filename.rm(force=True)

@test
def test_read_binary_file_with_slash_slash():
    filename = Path("test_read_binary_file_with_slash_slash.bin")
    filename.rm(force=True)

    bf = BinaryFile(str(filename), "w")
    bf.write(b"123")
    bf.close()

    bf = BinaryFile("src///..//test_read_binary_file_with_slash_slash.bin")
    assert bf.read() == b"123"
    bf.close()

    filename.rm(force=True)

@test
def test_text_file():
    tf = TextFile("README.rst")
    data = tf.read()
    assert "Os" in data
    tf.close()

@test
def test_write_text_file():
    filename = Path("test_write_text_file.txt")
    filename.rm(force=True)

    tf = TextFile(str(filename), "w")
    tf.write("123")
    tf.close()

    tf = TextFile(str(filename))
    assert tf.read() == "123"
    tf.close()

    filename.rm(force=True)

@test
def test_text_file_does_not_exist():
    try:
        message = ""
        TextFile("flapp.flopp")
    except OsError as e:
        message = e.message

    assert message.starts_with("failed to open 'flapp.flopp': ")

@test
def test_tar():
    directory = Path("test_tar")
    archive = Path("test_tar.tar.gz")

    directory.rm(recursive=True, force=True)
    archive.rm(recursive=True, force=True)

    # Create.
    directory.mkdir()
    BinaryFile("test_tar/hello.txt", "w").write(b"hi\n")
    tar(archive, create=True, path=directory)

    # Extract.
    directory.rm(recursive=True, force=True)
    tar(archive, extract=True)
    assert BinaryFile("test_tar/hello.txt").read() == b"hi\n"

    directory.rm(recursive=True, force=True)
    archive.rm(recursive=True, force=True)
