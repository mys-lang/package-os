from fiber import Fiber
from fiber import current
from fiber import suspend
from .utils import to_utf8

c"""source-before-namespace
#include <fstream>
#include <filesystem>
#include <cstdlib>
#include <sys/types.h>
#include <sys/stat.h>

extern char **environ;

static inline void setenv_wrapper(const char *name_p, const char *value_p)
{
    setenv(name_p, value_p, 1);
}

static inline void unsetenv_wrapper(const char *name_p)
{
    unsetenv(name_p);
}

static inline int chmod_wrapper(const char *name_p, u32 mode)
{
    return chmod(name_p, mode);
}

static inline int system_wrapper(const char *command_p)
{
    return system(command_p);
}
"""

_ENV: {string: string} = _load_env()

def _load_env() -> {string: string}:
    variables: {string: string} = {}
    line: string = None

    c"""
    char **envvar = environ;

    while (*envvar != NULL) {
        line = String(*envvar);
    """

    name, separator, value = line.partition("=")

    if separator == "=":
        variables[name] = value

    c"""
        envvar++;
    }
    """

    return variables

class OsError(Error):
    message: string

c"""
static void read_data(BinaryFile *binary_file_p);

static void on_open_complete(uv_fs_t *request_p)
{
    BinaryFile *binary_file_p = (BinaryFile *)(request_p->data);

    uv_fs_req_cleanup(request_p);
    binary_file_p->m_file = request_p->result;
    resume(binary_file_p->_fiber);
}

static void on_read_complete(uv_fs_t *request_p)
{
    BinaryFile *binary_file_p = (BinaryFile *)(request_p->data);

    uv_fs_req_cleanup(request_p);

    if (request_p->result < 0) {
        fprintf(stderr, "error: %s\n", uv_strerror(request_p->result));
    } else if (request_p->result == 0) {
        resume(binary_file_p->_fiber);
    } else {
        for (int i = 0; i < request_p->result; i++) {
            binary_file_p->_data += binary_file_p->m_data[i];
        }

        read_data(binary_file_p);
    }
}

static void read_data(BinaryFile *binary_file_p)
{
    uv_fs_read(uv_default_loop(),
               &binary_file_p->m_request,
               binary_file_p->m_file,
               &binary_file_p->m_buf,
               1,
               -1,
               on_read_complete);
}

static void on_write_complete(uv_fs_t *request_p)
{
    BinaryFile *binary_file_p = (BinaryFile *)(request_p->data);

    uv_fs_req_cleanup(request_p);
    resume(binary_file_p->_fiber);
}
"""

class BinaryFile:
    """A binary file.

    """

    c"uv_fs_t m_request;"
    c"uv_buf_t m_buf;"
    c"char m_data[256];"
    c"uv_file m_file;"
    _data: bytes
    _fiber: Fiber

    def __init__(self, path: string, mode: string = "r"):
        """Opens given file.

        """

        path_utf8 = to_utf8(path)
        self._fiber = current()

        c"""
        m_request.data = this;
        int flags;

        if (mode == String("r")) {
            flags = O_RDONLY;
        } else if (mode == String("w")) {
            flags = O_WRONLY | O_CREAT | O_TRUNC;
        } else {
            flags = 0;
        }

        uv_fs_open(uv_default_loop(),
                   &m_request,
                   (const char *)path_utf8.m_bytes->data(),
                   flags,
                   0664,
                   on_open_complete);
        """

        suspend()
        message: string = None

        c"""
        if (m_file < 0) {
            message = String(uv_strerror(m_file));
        }
        """

        if message is not None:
            raise OsError(f"failed to open '{path}': {message}")

        self._fiber = None

    def __del__(self):
        self.close()

    def close(self):
        """Close the file. The file is closed automatically in the destructor
        if not already closed.

        """

        c"""
        if (m_file != -1) {
            uv_fs_close(uv_default_loop(), &m_request, m_file, NULL);
            m_file = -1;
        }
        """

    def read(self) -> bytes:
        """Read from the file.

        """

        if self._fiber is not None:
            raise OsError("Only one fiber can use the file.")

        self._fiber = current()
        self._data = b""

        c"""
        m_buf = uv_buf_init(m_data, sizeof(m_data));
        uv_fs_read(uv_default_loop(),
                   &m_request,
                   m_file,
                   &m_buf,
                   1,
                   -1,
                   on_read_complete);
        """

        suspend()
        self._fiber = None

        return self._data

    def write(self, data: bytes):
        """Write to the file.

        """

        if self._fiber is not None:
            raise OsError("Only one fiber can use the file.")

        self._fiber = current()

        c"""
        m_buf = uv_buf_init((char *)data.m_bytes->data(),
                            data.m_bytes->size());
        uv_fs_write(uv_default_loop(),
                    &m_request,
                    m_file,
                    &m_buf,
                    1,
                    -1,
                    on_write_complete);
        """

        suspend()
        self._fiber = None

class TextFile:
    """A text file.

    """

    _binary_file: BinaryFile

    def __init__(self, path: string):
        """Opens given file.

        """

        self._binary_file = BinaryFile(path)

    def close(self):
        """Close the file. The file is closed automatically in the destructor
        if not already closed.

        """

        self._binary_file.close()

    def read(self) -> string:
        """Read from the file.

        """

        return string(self._binary_file.read())

def which(name: string) -> string:
    """Locate given command.

    """

    # Obviously not perfect...
    for path in getenv("PATH").split(":"):
        full_path = f"{path}/{name}"

        if exists(full_path):
            return full_path

    return None

def ln(src_path: string, dst_path: string):
    raise NotImplementedError()

def ls(path: string) -> [string]:
    raise NotImplementedError()

def rm(path: string, recursive: bool = False, force: bool = False):
    """Remove files and directories.

    Give `recursive` as ``True`` to remove all files and folders
    recursivly.

    Give `force` as ``True`` to ignore errors.

    """

    path_utf8 = to_utf8(path)
    message: string = None

    c"""
    std::error_code ec;
    bool ok;

    if (recursive) {
        ok = (std::filesystem::remove_all((char *)path_utf8.m_bytes->data(), ec) > 0);
    } else {
        ok = std::filesystem::remove((char *)path_utf8.m_bytes->data(), ec);
    }

    if (!ok) {
        if (!force) {
            if (ec) {
                message = String(ec.message());
            } else {
                message = String(strerror(ENOENT));
            }
        }
    }
    """

    if message is not None:
        raise OsError(message)

def mkdir(path: string, exists_ok: bool = False):
    """Create directories.

    Give `exists_ok` as ``True`` to ignore errors.

    """

    path_utf8 = to_utf8(path)
    message: string = None

    c"""
    std::error_code ec;
    bool ok;

    ok = std::filesystem::create_directories((char *)path_utf8.m_bytes->data(), ec);

    if (!ok) {
        if (ec) {
            message = String(ec.message());
        } else if (!exists_ok) {
            message = String(strerror(EEXIST));
        }
    }
    """

    if message is not None:
        raise OsError(message)

def exists(path: string) -> bool:
    res: bool = False
    path_utf8 = to_utf8(path)

    c"""
    res = std::filesystem::exists((const char *)path_utf8.m_bytes->data());
    """

    return res

def chmod(path: string, mode: u32):
    """Change permissions of given file.

    """

    message: string = None
    path_utf8 = to_utf8(path)

    c"""
    if (chmod_wrapper((const char *)path_utf8.m_bytes->data(), mode) != 0) {
        message = String(strerror(errno));
    }
    """

    if message is not None:
        raise OsError(message)

class Stat:
    pass

def stat(path: string) -> Stat:
    raise NotImplementedError()

def cwd() -> string:
    path: string = None

    c"""
    path = String(std::filesystem::current_path());
    """

    return path

def is_file(path: string) -> bool:
    raise NotImplementedError()

def is_dir(path: string) -> bool:
    raise NotImplementedError()

def readlink(path: string) -> string:
    raise NotImplementedError()

def touch(path: string):
    # ToDo: Only update mtime if exists.
    path_utf8 = to_utf8(path)

    c"""
    std::ofstream MyFile((char *)path_utf8.m_bytes->data());
    """

def basename(path: string) -> string:
    raise NotImplementedError()

def cd(path: string):
    path_utf8 = to_utf8(path)
    message: string = None

    c"""
    std::error_code ec;

    std::filesystem::current_path((char *)path_utf8.m_bytes->data(), ec);

    if (ec) {
        message = String(ec.message());
    }
    """

    if message is not None:
        raise OsError(message)

def abspath(path: string) -> string:
    raise NotImplementedError()

def expanduser(path: string) -> string:
    raise NotImplementedError()

def env() -> {string: string}:
    """Returns all envirionment variables.

    """

    return _ENV

def getenv(name: string) -> string:
    """Get given environment variable.

    """

    if name not in _ENV:
        raise OsError(f"environment variable '{name}' is not set")

    return getenv(name, None)

def getenv(name: string, default: string) -> string:
    """Get given environment variable. Returns given default value if the
    environment variable is not set.

    """

    return _ENV.get(name, default)

def setenv(name: string, value: string):
    """Set given environment variable.

    """

    name_utf8 = to_utf8(name)
    value_utf8 = to_utf8(value)

    c"""
    setenv_wrapper((const char *)name_utf8.m_bytes->data(),
                   (const char *)value_utf8.m_bytes->data());
    """

    _ENV[name] = value

def unsetenv(name: string):
    """Unset given environment variable.

    """

    name_utf8 = to_utf8(name)

    c"""
    unsetenv_wrapper((const char *)name_utf8.m_bytes->data());
    """

    _ENV.pop(name, None)

def system(command: string):
    command_utf8 = to_utf8(command)
    ok = True

    c"""
    if (system_wrapper((char *)command_utf8.m_bytes->data()) != 0) {
        ok = false;
    }
    """

    if not ok:
        raise OsError(f"System command '{command}' failed.")

def tar(archive: string,
        extract: bool = False,
        create: bool = False,
        path: string = None):
    if extract:
        system(f"tar xf {archive}")
    elif create:
        system(f"tar czf {archive} {path}")
    else:
        raise OsError("No tar operation given.")

@test
def test_rm():
    rm("test_rm", recursive=True, force=True)
    mkdir("test_rm")
    rm("test_rm", recursive=True)
    mkdir("test_rm/foo/bar", exists_ok=True)

    try:
        message = ""
        rm("test_rm")
    except OsError as e:
        message = e.message

    assert message == "Directory not empty"

    rm("test_rm", recursive=True)

@test
def test_rm_single_file():
    touch("test_rm_single_file")
    rm("test_rm_single_file")

    try:
        message = ""
        rm("test_rm_single_file")
    except OsError as e:
        message = e.message

    assert message == "No such file or directory"

    rm("test_rm_single_file", force=True)

@test
def test_env_get_pwd():
    assert getenv("PWD") is not None

@test
def test_env_get_set_unset():
    try:
        message = ""
        getenv("FOOBAR")
    except OsError as e:
        message = e.message

    assert message == "environment variable 'FOOBAR' is not set"
    assert getenv("FOOBAR", "apple") == "apple"

    setenv("FOOBAR", "banan")
    assert getenv("FOOBAR") == "banan"

    unsetenv("FOOBAR")
    assert getenv("FOOBAR", None) is None

@test
def test_all():
    assert env() is not None
    assert "PWD" in env()

@test
def test_chmod():
    filename = "cmod"

    rm(filename, force=True)

    try:
        message = ""
        chmod(filename, 0o666)
    except OsError as e:
        message = e.message

    assert message == "No such file or directory"

    touch(filename)
    chmod(filename, 0o666)
    rm(filename)

@test
def test_which():
    assert which("mys-xyz123") is None
    assert which("ls") is not None

@test
def test_cwd():
    mkdir("cmd", exists_ok=True)
    cd("cmd")
    assert cwd().ends_with("cmd")
    cd("..")
    rm("cmd")

@test
def test_mkdir():
    rm("adir", force=True)
    mkdir("adir", exists_ok=True)

    try:
        message = ""
        mkdir("adir")
    except OsError as e:
        message = e.message

    assert message == "File exists"

@test
def test_cd():
    rm("ccc", force=True)
    path = cwd()

    try:
        message = ""
        cd("ccc")
    except OsError as e:
        message = e.message

    assert message == "No such file or directory"

    mkdir("ccc")
    cd("ccc")
    assert cwd() != path
    touch("ccc/apa")
    cd("..")
    assert cwd() == path
    exists("ccc/apa")

    rm("ccc", recursive=True, force=True)

@test
def test_binary_file():
    bf = BinaryFile("README.rst")
    data = bf.read()
    assert len(data) > 0
    bf.close()

@test
def test_binary_file_not_found():
    rm("test_binary_file_not_found.bin", force=True)

    try:
        ok = False
        BinaryFile("test_binary_file_not_found.bin")
    except OsError as e:
        ok = True

    assert ok

    rm("test_binary_file_not_found.bin", force=True)

@test
def test_create_binary_file():
    rm("test_create_binary_file.bin", force=True)

    bf = BinaryFile("test_create_binary_file.bin", "w")
    bf.close()

    bf = BinaryFile("test_create_binary_file.bin")
    assert bf.read() == b""

    rm("test_create_binary_file.bin", force=True)

@test
def test_write_binary_file():
    rm("test_write_binary_file.bin", force=True)

    bf = BinaryFile("test_write_binary_file.bin", "w")
    bf.write(b"123")
    bf.close()

    bf = BinaryFile("test_write_binary_file.bin")
    assert bf.read() == b"123"
    bf.close()

    rm("test_write_binary_file.bin", force=True)

@test
def test_text_file():
    tf = TextFile("README.rst")
    data = tf.read()
    assert "Os" in data
    tf.close()

@test
def test_text_file_does_not_exist():
    try:
        message = ""
        TextFile("flapp.flopp")
    except OsError as e:
        message = e.message

    assert message.starts_with("failed to open 'flapp.flopp': ")

@test
def test_system():
    system("pwd")

@test
def test_tar():
    rm("test_tar", recursive=True, force=True)
    rm("test_tar.tar.gz", recursive=True, force=True)

    # Create.
    mkdir("test_tar")
    BinaryFile("test_tar/hello.txt", "w").write(b"hi\n")
    tar("test.tar.gz", create=True, path="test_tar")

    # Extract.
    rm("test_tar", recursive=True, force=True)
    tar("test.tar.gz", extract=True)
    assert BinaryFile("test_tar/hello.txt").read() == b"hi\n"

    rm("test_tar", recursive=True, force=True)
    rm("test_tar.tar.gz", recursive=True, force=True)
