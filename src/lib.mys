c"""source-before-namespace
#include <fstream>
#include <filesystem>
#include <cstdlib>
#include <sys/types.h>
#include <sys/stat.h>

extern char **environ;

static inline void setenv_wrapper(const char *name_p, const char *value_p)
{
    setenv(name_p, value_p, 1);
}

static inline void unsetenv_wrapper(const char *name_p)
{
    unsetenv(name_p);
}

static inline int chmod_wrapper(const char *name_p, u32 mode)
{
    return chmod(name_p, mode);
}
"""

_ENV: {string: string} = _load_env()

def _load_env() -> {string: string}:
    variables: {string: string} = {}
    line: string = None

    c"""
    char **envvar = environ;

    while (*envvar != NULL) {
        line = String(*envvar);
    """

    name, separator, value = line.partition("=")

    if separator == "=":
        variables[name] = value

    c"""
        envvar++;
    }
    """

    return variables

class OsError(Error):
    message: string

def to_utf8(value: string) -> bytes:
    value_utf8 = value.to_utf8()
    value_utf8 += 0

    return value_utf8

def which(name: string) -> bool:
    raise NotImplementedError()

def ln(src_path: string, dst_path: string):
    raise NotImplementedError()

def ls(path: string) -> [string]:
    raise NotImplementedError()

def rm(path: string, recursive: bool = False, force: bool = False):
    """Remove files and directories.

    Give `recursive` as ``True`` to remove all files and folders
    recursivly.

    Give `force` as ``True`` to ignore errors.

    """

    path_utf8 = to_utf8(path)
    message: string = None

    c"""
    std::error_code ec;
    bool ok;

    if (recursive) {
        ok = (std::filesystem::remove_all((char *)path_utf8.m_bytes->data(), ec) > 0);
    } else {
        ok = std::filesystem::remove((char *)path_utf8.m_bytes->data(), ec);
    }

    if (!ok) {
        if (!force) {
            if (ec) {
                message = String(ec.message());
            } else {
                message = String(strerror(ENOENT));
            }
        }
    }
    """

    if message is not None:
        raise OsError(message)

def mkdir(path: string, exists_ok: bool = False):
    """Create directories.

    Give `exists_ok` as ``True`` to ignore errors.

    """

    path_utf8 = to_utf8(path)
    message: string = None

    c"""
    std::error_code ec;
    bool ok;

    ok = std::filesystem::create_directories((char *)path_utf8.m_bytes->data(), ec);

    if (!ok) {
        message = String(ec.message());
    }
    """

    if message is not None:
        raise OsError(message)

def exists(path: string) -> bool:
    return is_file(path) or is_dir(path)

def chmod(path: string, mode: u32):
    message: string = None
    path_utf8 = to_utf8(path)

    c"""
    if (chmod_wrapper((const char *)path_utf8.m_bytes->data(), mode) != 0) {
        message = String(strerror(errno));
    }
    """

    if message is not None:
        raise OsError(message)

class Stat:
    pass

def stat(path: string) -> Stat:
    raise NotImplementedError()

def cwd() -> string:
    raise NotImplementedError()

def is_file(path: string) -> bool:
    raise NotImplementedError()

def is_dir(path: string) -> bool:
    raise NotImplementedError()

def readlink(path: string) -> string:
    raise NotImplementedError()

def touch(path: string):
    # ToDo: Use open().
    path_utf8 = to_utf8(path)

    c"""
    std::ofstream MyFile((char *)path_utf8.m_bytes->data());
    """

def basename(path: string) -> string:
    raise NotImplementedError()

def cd(path: string):
    raise NotImplementedError()

def abspath(path: string) -> string:
    raise NotImplementedError()

def expanduser(path: string) -> string:
    raise NotImplementedError()

def env() -> {string: string}:
    """Returns all envirionment variables.

    """

    return _ENV

def getenv(name: string) -> string:
    """Get given environment variable.

    """

    if name not in _ENV:
        raise OsError(f"environment variable '{name}' is not set")

    return getenv(name, None)

def getenv(name: string, default: string) -> string:
    """Get given environment variable. Returns given default value if the
    environment variable is not set.

    """

    return _ENV.get(name, default)

def setenv(name: string, value: string):
    """Set given environment variable.

    """

    name_utf8 = to_utf8(name)
    value_utf8 = to_utf8(value)

    c"""
    setenv_wrapper((const char *)name_utf8.m_bytes->data(),
                   (const char *)value_utf8.m_bytes->data());
    """

    _ENV[name] = value

def unsetenv(name: string):
    """Unset given environment variable.

    """

    name_utf8 = to_utf8(name)

    c"""
    unsetenv_wrapper((const char *)name_utf8.m_bytes->data());
    """

    _ENV.pop(name, None)

@test
def test_rm():
    rm("test_rm", recursive=True, force=True)
    mkdir("test_rm")
    rm("test_rm", recursive=True)
    mkdir("test_rm/foo/bar", exists_ok=True)
    message: string = None

    try:
        rm("test_rm")
    except OsError as e:
        message = e.message

    assert message == "Directory not empty"

    rm("test_rm", recursive=True)

@test
def test_rm_single_file():
    touch("test_rm_single_file")
    rm("test_rm_single_file")
    message: string = None

    try:
        rm("test_rm_single_file")
    except OsError as e:
        message = e.message

    assert message == "No such file or directory"

    rm("test_rm_single_file", force=True)

@test
def test_env_get_pwd():
    assert getenv("PWD") is not None

@test
def test_env_get_set_unset():
    message: string = None

    try:
        getenv("FOOBAR")
    except OsError as e:
        message = e.message

    assert message == "environment variable 'FOOBAR' is not set"
    assert getenv("FOOBAR", "apple") == "apple"

    setenv("FOOBAR", "banan")
    assert getenv("FOOBAR") == "banan"

    unsetenv("FOOBAR")
    assert getenv("FOOBAR", None) is None

@test
def test_all():
    assert env() is not None
    assert "PWD" in env()

@test
def test_chmod():
    filename = "cmod"

    rm(filename, force=True)

    message: string = None

    try:
        chmod(filename, 0x666)
    except OsError as e:
        message = e.message

    assert message == "No such file or directory"

    touch(filename)
    chmod(filename, 0x666)
    rm(filename)
