c"""source-before-namespace
#include <fstream>
#include <filesystem>
"""

class OsError(Error):
    message: string

def to_utf8(value: string) -> bytes:
    value_utf8 = value.to_utf8()
    value_utf8 += 0

    return value_utf8

def which(name: string) -> bool:
    raise NotImplementedError()

def ln(src_path: string, dst_path: string):
    raise NotImplementedError()

def ls(path: string) -> [string]:
    raise NotImplementedError()

def rm(path: string, recursive: bool = False, force: bool = False):
    """Remove files and directories.

    Give `recursive` as ``True`` to remove all files and folders
    recursivly.

    Give `force` as ``True`` to ignore errors.

    """

    path_utf8 = to_utf8(path)
    message: string = None

    c"""
    std::error_code ec;
    bool ok;

    if (recursive) {
        ok = (std::filesystem::remove_all((char *)path_utf8.m_bytes->data(), ec) > 0);
    } else {
        ok = std::filesystem::remove((char *)path_utf8.m_bytes->data(), ec);
    }

    if (!ok) {
        if (!force) {
            if (ec) {
                message = String(ec.message());
            } else {
                message = String(strerror(ENOENT));
            }
        }
    }
    """

    if message is not None:
        raise OsError(message)

def mkdir(path: string, exists_ok: bool = False):
    """Create directories.

    Give `exists_ok` as ``True`` to ignore errors.

    """

    path_utf8 = to_utf8(path)
    message: string = None

    c"""
    std::error_code ec;
    bool ok;

    ok = std::filesystem::create_directories((char *)path_utf8.m_bytes->data(), ec);

    if (!ok) {
        message = String(ec.message());
    }
    """

    if message is not None:
        raise OsError(message)

def exists(path: string) -> bool:
    return is_file(path) or is_dir(path)

def chmod(path: string, mode: u32):
    raise NotImplementedError()

class Stat:
    pass

def stat(path: string) -> Stat:
    raise NotImplementedError()

def cwd() -> string:
    raise NotImplementedError()

def is_file(path: string) -> bool:
    raise NotImplementedError()

def is_dir(path: string) -> bool:
    raise NotImplementedError()

def readlink(path: string) -> string:
    raise NotImplementedError()

def touch(path: string):
    # ToDo: Use open().
    path_utf8 = to_utf8(path)

    c"""
    std::ofstream MyFile((char *)path_utf8.m_bytes->data());
    """

def basename(path: string) -> string:
    raise NotImplementedError()

def cd(path: string):
    raise NotImplementedError()

def abspath(path: string) -> string:
    raise NotImplementedError()

def expanduser(path: string) -> string:
    raise NotImplementedError()

@test
def test_rm():
    rm("test_rm", recursive=True, force=True)
    mkdir("test_rm")
    rm("test_rm", recursive=True)
    mkdir("test_rm/foo/bar", exists_ok=True)
    message: string = None

    try:
        rm("test_rm")
    except OsError as e:
        message = e.message

    assert message == "Directory not empty"

    rm("test_rm", recursive=True)

@test
def test_rm_single_file():
    touch("test_rm_single_file")
    rm("test_rm_single_file")
    message: string = None

    try:
        rm("test_rm_single_file")
    except OsError as e:
        message = e.message

    assert message == "No such file or directory"

    rm("test_rm_single_file", force=True)
