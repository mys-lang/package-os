from . import BinaryFile
from . import OsError
from . import TextFile
from . import cwd
from .utils import to_utf8

c"""source-before-namespace
#include <fstream>
#include <filesystem>
#include <cstdlib>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>

static inline int chmod_wrapper(const char *name_p, u32 mode)
{
    return chmod(name_p, mode);
}
"""

class Path:
    """A file system path.

    """

    _parts: [string]

    func __init__(self, path: string):
        if path == "":
            path = "."

        self._parts = []

        if path[0] == '/':
            self._parts.append("/")

        for part in path.split("/"):
            if part in ["", "."]:
                continue

            self._parts.append(part)

    func ==(self, other: Path) -> bool:
        return self.to_string() == other.to_string()

    func !=(self, other: Path) -> bool:
        return not (self == other)

    func name(self) -> string:
        """The final component.

        """

        if self._parts.length() == 0:
            return ""

        name = self._parts[-1]

        if name == "/":
            return ""

        return name

    func stem(self) -> string:
        """The final component without extension.

        """

        extension_length = self.extension().length()

        if extension_length > 0:
            return self.name()[:-extension_length]
        else:
            return self.name()

    func extension(self) -> string:
        """The final component extension, including the dot.

        """

        name = self.name()
        last_dot_index = name.find_reverse('.')

        if last_dot_index <= 0 or last_dot_index == (name.length() - 1):
            return ""

        return name[last_dot_index:]

    func parent(self) -> Path:
        """The parent path.

        """

        return Path("/".join(self._parts[:-1]))

    func join(self, other: string) -> Path:
        """Join with other path.

        """

        if self.name() == "" and self._parts.length() == 0:
            return Path("./" + other)
        else:
            return Path(self.to_string() + "/" + other)

    func join(self, other: Path) -> Path:
        """Join with other path.

        """

        return self.join(other.to_string())

    func is_absolute(self) -> bool:
        """Check if absolute.

        """

        return self._parts.length() > 0 and self._parts[0] == "/"

    func is_relative(self) -> bool:
        """Check if relative.

        """

        return not self.is_absolute()

    func with_name(self, name: string) -> Path:
        """Returns a new path with given name.

        """

        if name in ["", "."] or name.starts_with('/'):
            raise OsError(f"Invalid name '{name}'.")
        elif self.name() == "":
            raise OsError(f"Path '{self}' has no name.")
        else:
            return self.parent().join(name)

    func with_stem(self, stem: string) -> Path:
        """Returns a new path with given stem.

        """

        return self.with_name(stem + self.extension())

    func with_extension(self, extension: string) -> Path:
        """Returns a new path with given extension.

        """

        if ((extension.length() > 0 and extension[0] != '.')
            or extension.length() == 1):
            raise OsError(f"Invalid extension '{extension}'.")

        return self.with_name(self.stem() + extension)

    func read_text(self) -> string:
        """Read file contents.

        """

        return TextFile(self).read()

    func write_text(self, data: string):
        """Write file contents.

        """

        TextFile(self, "w").write(data)

    func read_binary(self) -> bytes:
        """Read file contents.

        """

        return BinaryFile(self).read()

    func write_binary(self, data: bytes):
        """Write file contents.

        """

        BinaryFile(self, "w").write(data)

    func open_binary(self, mode: string = "r") -> BinaryFile:
        """Open binary file.

        """

        return BinaryFile(self, mode)

    func open_text(self, mode: string = "r") -> TextFile:
        """Open binary file.

        """

        return TextFile(self, mode)

    func exists(self) -> bool:
        """Check for existence.

        """

        res: bool = False
        path_utf8 = to_utf8(self.to_string())

        c"""
        res = std::filesystem::exists((const char *)path_utf8.m_bytes->data());
        """

        return res

    func mkdir(self, exists_ok: bool = False):
        """Create directories.

        Give `exists_ok` as ``True`` to ignore errors.

        """

        path_utf8 = to_utf8(self.to_string())
        message: string? = None

        c"""
        std::error_code ec;
        bool ok;

        ok = std::filesystem::create_directories((char *)path_utf8.m_bytes->data(), ec);

        if (!ok) {
            if (ec) {
                message = String(ec.message());
            } else if (!exists_ok) {
                message = String(strerror(EEXIST));
            }
        }
        """

        if message is not None:
            raise OsError(message)

    func chmod(self, mode: u32):
        """Change permissions.

        """

        message: string? = None
        path_utf8 = to_utf8(self.to_string())

        c"""
        if (chmod_wrapper((const char *)path_utf8.m_bytes->data(), mode) != 0) {
            message = String(strerror(errno));
        }
        """

        if message is not None:
            raise OsError(message)

    func ls(self) -> [Path]:
        """Returns all files and folders.

        """

        dpath = self.to_string()

        if dpath == "":
            dpath = "."

        path_utf8 = to_utf8(dpath)
        entries: [Path] = []

        c"""
        char *path_p = (char *)path_utf8.m_bytes->data();

        for (const auto& entry : std::filesystem::directory_iterator(path_p)) {
            entries->append(mys::make_shared<Path>(entry.path().filename().c_str()));
        }
        """

        return entries

    func rm(self, recursive: bool = False, force: bool = False):
        """Remove files and directories.

        Give `recursive` as ``True`` to remove all files and folders
        recursivly.

        Give `force` as ``True`` to ignore errors.

        """

        path_utf8 = to_utf8(self.to_string())
        message: string? = None

        c"""
        std::error_code ec;
        bool ok;
        char *path_p = (char *)path_utf8.m_bytes->data();

        if (recursive) {
            ok = (std::filesystem::remove_all(path_p, ec) > 0);
        } else {
            ok = std::filesystem::remove(path_p, ec);
        }

        if (!ok) {
            if (!force) {
                if (ec) {
                    message = String(ec.message());
                } else {
                    message = String(strerror(ENOENT));
                }
            }
        }
        """

        if message is not None:
            raise OsError(message)

    func touch(self):
        """Update modification time and creates if missing.

        """

        path_utf8 = to_utf8(self.to_string())
        fd = 0

        c"""
        fd = open((char *)path_utf8.m_bytes->data(), O_CREAT, 0666);

        if (fd != -1) {
            close(fd);
        }
        """

        if fd == -1:
            raise OsError(f"Touch failed.")

    func cd(self):
        """Change directory.

        """

        path_utf8 = to_utf8(self.to_string())
        message: string? = None

        c"""
        std::error_code ec;

        std::filesystem::current_path((char *)path_utf8.m_bytes->data(), ec);

        if (ec) {
            message = String(ec.message());
        }
        """

        if message is not None:
            raise OsError(message)

    func cp(self, dst: Path, recursive: bool = False):
        """Copy files and directories.

        """

        src_utf8 = to_utf8(self.to_string())
        dst_utf8 = to_utf8(str(dst))
        message: string? = None

        c"""
        std::error_code ec;
        std::filesystem::copy_options options;

        if (recursive) {
            options = std::filesystem::copy_options::recursive;
        } else {
            options = std::filesystem::copy_options::none;
        }

        std::filesystem::copy((char *)src_utf8.m_bytes->data(),
                              (char *)dst_utf8.m_bytes->data(),
                              options,
                              ec);

        if (ec) {
            message = String(ec.message());
        }
        """

        if message is not None:
            raise OsError(message)

    func mv(self, dst: Path):
        """Move files and directories.

        """

        self.cp(dst, recursive=True)
        self.rm(recursive=True, force=True)

    func to_string(self) -> string:
        """Return the path as a string.

        """

        return "/".join(self._parts).replace("//", "/")

    func __str__(self) -> string:
        return self.to_string()

test path():
    assert Path("").to_string() == ""
    assert Path("foo//bar").to_string() == "foo/bar"
    assert Path("foo/./bar").to_string() == "foo/bar"
    assert Path("foo/../bar").to_string() == "foo/../bar"

test name():
    assert Path("foo/bar.txt").name() == "bar.txt"
    assert Path("").name() == ""
    assert Path("foo.txt").name() == "foo.txt"
    assert Path("/foo/bar").name() == "bar"
    assert Path(".bar").name() == ".bar"
    assert Path("foo.tar.gz").name() == "foo.tar.gz"
    assert Path("a/b/").name() == "b"

test stem():
    assert Path("foo/bar.txt").stem() == "bar"
    assert Path("").stem() == ""
    assert Path("foo.txt").stem() == "foo"
    assert Path("/foo/bar").stem() == "bar"
    assert Path(".bar").stem() == ".bar"
    assert Path("..out").stem() == "."
    assert Path("foo.tar.gz").stem() == "foo.tar"
    assert Path("foo.tar.gz.").stem() == "foo.tar.gz."

test extension():
    assert Path("foo/bar.txt").extension() == ".txt"
    assert Path("").extension() == ""
    assert Path("bar.tar.gz").extension() == ".gz"
    assert Path("foo.txt").extension() == ".txt"
    assert Path("/foo/bar").extension() == ""
    assert Path(".bar").extension() == ""
    assert Path("..out").extension() == ".out"
    assert Path("foo.tar.gz").extension() == ".gz"
    assert Path("foo.tar.gz.").extension() == ""

test parent():
    assert Path("foo/bar.txt").parent() == Path("foo")
    assert Path(".").parent() == Path(".")
    assert Path("foo").parent().parent() == Path(".")

test join():
    path = Path("foo").join("bar.txt")
    assert path.to_string() == "foo/bar.txt"

    path = Path("foo").join("/bar.txt")
    assert path.to_string() == "foo/bar.txt"

    path = Path("foo/").join("/bar.txt")
    assert path.to_string() == "foo/bar.txt"

    path = Path("foo").join(Path("bar.txt"))
    assert path.to_string() == "foo/bar.txt"

    path = Path(".").join(Path("bar.txt"))
    assert path.to_string() == "bar.txt"

    path = Path("./").join(Path("/bar.txt"))
    assert path.to_string() == "bar.txt"

    path = Path("").join(Path("/bar.txt"))
    assert path.to_string() == "bar.txt"

    path = Path("/").join(Path("bar.txt"))
    assert path.to_string() == "/bar.txt"

    path = Path("").join(Path("/"))
    assert path.to_string() == ""

test ls():
    directory = Path("ls")
    directory.rm(recursive=True, force=True)
    directory.mkdir()
    directory.join("a").mkdir()
    directory.join("b").mkdir()
    directory.join("c").touch()

    entries = directory.ls()

    assert entries.length() == 3
    assert Path("a") in entries
    assert Path("b") in entries
    assert Path("c") in entries

    directory.rm(recursive=True, force=True)

test rm():
    directory = Path("test_rm")
    directory.rm(recursive=True, force=True)
    directory.mkdir()
    directory.rm(recursive=True)
    directory.join("foo/bar").mkdir(exists_ok=True)

    try:
        message = ""
        directory.rm()
    except OsError as error:
        message = error.message

    assert message == "Directory not empty"

    directory.rm(recursive=True)

test rm_single_file():
    filename = Path("test_rm_single_file")
    filename.touch()
    filename.rm()

    try:
        message = ""
        filename.rm()
    except OsError as error:
        message = error.message

    assert message == "No such file or directory"

    filename.rm(force=True)

test chmod():
    filename = Path("cmod")

    filename.rm(force=True)

    try:
        message = ""
        filename.chmod(0o666)
    except OsError as error:
        message = error.message

    assert message == "No such file or directory"

    filename.touch()
    filename.chmod(0o666)
    filename.rm()

test mkdir():
    directory = Path("adir")
    directory.rm(force=True)
    directory.mkdir(exists_ok=True)

    try:
        message = ""
        directory.mkdir()
    except OsError as error:
        message = error.message

    assert message == "File exists"

test cd():
    Path("ccc").rm(recursive=True, force=True)
    path = cwd()

    try:
        message = ""
        Path("ccc").cd()
    except OsError as error:
        message = error.message

    assert message == "No such file or directory"

    Path("ccc").mkdir()
    Path("ccc").cd()
    assert cwd() != path
    Path("apa").touch()
    Path("..").cd()
    assert cwd() == path
    Path("ccc/apa").exists()

    Path("ccc").rm(recursive=True, force=True)

test cp():
    Path("cp").rm(recursive=True, force=True)
    Path("cp-2").rm(recursive=True, force=True)

    Path("cp").mkdir()
    Path("cp/foo.txt").touch()
    Path("cp/bar.txt").touch()
    Path("cp/foo").mkdir()
    Path("cp/foo/fie.txt").touch()

    Path("cp").cp(Path("cp-2"), recursive=True)

    assert Path("cp/foo.txt").exists()
    assert Path("cp/bar.txt").exists()
    assert Path("cp/foo/fie.txt").exists()
    assert Path("cp-2/foo.txt").exists()
    assert Path("cp-2/bar.txt").exists()
    assert Path("cp-2/foo/fie.txt").exists()

    Path("cp").rm(recursive=True, force=True)
    Path("cp-2").rm(recursive=True, force=True)

test mv():
    Path("mv").rm(recursive=True, force=True)
    Path("mv-2").rm(recursive=True, force=True)

    Path("mv").mkdir()
    Path("mv/foo.txt").touch()
    Path("mv/bar.txt").touch()
    Path("mv/foo").mkdir()
    Path("mv/foo/fie.txt").touch()

    Path("mv").mv(Path("mv-2"))

    assert not Path("mv").exists()
    assert Path("mv-2/foo.txt").exists()
    assert Path("mv-2/bar.txt").exists()
    assert Path("mv-2/foo/fie.txt").exists()

    Path("mv-2").rm(recursive=True, force=True)

test with_name():
    try:
        assert Path("").with_name("foo.txt") == Path("")
        assert False
    except OsError:
        pass

    assert Path("foo.log").with_name("foo.txt") == Path("foo.txt")
    assert Path("a/b").with_name("c") == Path("a/c")

    try:
        Path("/").with_name("c")
        assert False
    except OsError:
        pass

    try:
        message = ""
        Path("/k").with_name("")
    except OsError as error:
        message = error.message

    assert message == "Invalid name ''."

    try:
        message = ""
        Path("/k").with_name(".")
    except OsError as error:
        message = error.message

    assert message == "Invalid name '.'."

    try:
        message = ""
        Path("/k").with_name("/a")
    except OsError as error:
        message = error.message

    assert message == "Invalid name '/a'."

test with_stem():
    assert Path("foo.log").with_stem("bar") == Path("bar.log")
    assert Path("foo").with_stem("bar") == Path("bar")
    assert Path("a/b.c").with_stem("d") == Path("a/d.c")
    path = Path("a").with_stem("b.c")
    assert path == Path("b.c")
    assert path.stem() == "b"
    assert path.extension() == ".c"
    assert Path("a.b").with_stem("") == Path(".b")

    try:
        message = ""
        Path(".").with_stem("a")
    except OsError as error:
        message = error.message

    assert message == "Path '' has no name."

    try:
        message = ""
        Path("/").with_stem("a")
    except OsError as error:
        message = error.message

    assert message == "Path '/' has no name."

    try:
        message = ""
        Path("a").with_stem("")
    except OsError as error:
        message = error.message

    assert message == "Invalid name ''."

test with_extension():
    assert Path("foo.log").with_extension(".txt") == Path("foo.txt")
    assert Path("a").with_extension(".b") == Path("a.b")
    assert Path("a").with_extension("..b") == Path("a..b")
    assert Path("a").with_extension("") == Path("a")
    assert Path("a.b").with_extension("") == Path("a")
    assert Path("a.b.c").with_extension("") == Path("a.b")
    assert Path("a.b.c").with_extension("").with_extension("") == Path("a")
    assert Path("a").with_extension("..") == Path("a..")

    try:
        message = ""
        Path("a").with_extension("b")
    except OsError as error:
        message = error.message

    assert message == "Invalid extension 'b'."

    try:
        message = ""
        Path("a").with_extension(".")
    except OsError as error:
        message = error.message

    assert message == "Invalid extension '.'."

    try:
        message = ""
        Path("").with_extension(".b")
    except OsError as error:
        message = error.message

    assert message == "Path '' has no name."

test is_absolute():
    assert Path("/").is_absolute()
    assert Path("/a/b").is_absolute()
    assert not Path("a/b").is_absolute()
    assert not Path("b").is_absolute()
    assert not Path("").is_absolute()

test is_relative():
    assert not Path("/").is_relative()
    assert not Path("/a/b").is_relative()
    assert Path("a/b").is_relative()
    assert Path("b").is_relative()
    assert Path("").is_relative()

test touch():
    path = Path("touch.txt")
    path.rm(force=True)

    path.touch()
    assert path.exists()
    assert path.read_text() == ""

    path.write_text("Hi!")
    assert path.read_text() == "Hi!"
    path.touch()
    assert path.read_text() == "Hi!"

    path.rm(force=True)

    try:
        message = ""
        Path("k/k/k/k/k/k/a").touch()
    except OsError as error:
        message = error.message

    assert message == "Touch failed."
